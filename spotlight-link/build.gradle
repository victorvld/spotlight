plugins {
    id "org.springframework.boot" version "3.1.0"
    id "org.jsonschema2pojo" version "1.2.1"
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
    springinstrument
}

ext {
    lombokVersion = '1.18.22'
}

dependencies {
    compileOnly "org.mapstruct:mapstruct:1.5.5-Final"
    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.mapstruct:mapstruct-processor:1.5.5.Final"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"

    implementation project(path: ':spotlight-core')
    implementation ('org.springframework.boot:spring-boot-starter-web')

    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-validation:'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'org.postgresql:postgresql'
    implementation "org.mapstruct:mapstruct:1.5.5.Final"
    implementation 'com.graphql-java-kickstart:graphql-spring-boot-starter:15.0.0'
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'com.networknt:json-schema-validator:1.0.87'
}

jsonSchema2Pojo {
    source = files("${sourceSets.main.output.resourcesDir}/schemas")
    // Target directory for generated Java source files. The plugin will add this directory to the
    // java source set so the compiler will find and compile the newly generated source files.
    targetDirectory = file("${project.buildDir}/generated-sources")
    annotationStyle = 'jackson2'
    sourceType = 'jsonschema'
    // Whether to use the 'title' property of the schema to decide the class name (if not
    // set to true, the filename and property names are used).
    useTitleAsClassname = true
    // Whether to initialize Set and List fields as empty collections, or leave them as null.
    initializeCollections = true
    // If set to true, then the gang of four builder pattern will be used to generate builders on
    // generated classes. Note: This property works in collaboration with generateBuilders.
    // If generateBuilders is false then this property will not do anything.
    useInnerClassBuilders = true
    // Whether to generate builder-style methods of the form withXxx(value) (that return this),
    // alongside the standard, void-return setters.
    generateBuilders = true
}